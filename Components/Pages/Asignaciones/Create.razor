@page "/asignaciones/nueva"
@attribute [Authorize(Policy = "GestionTecnica")]
@inject IAsignacionesService AsignacionesService
@inject IActivosService ActivosService
@inject UserManager<AppUser> UserManager
@inject NavigationManager Navigation

<h1>Nueva asignaci√≥n</h1>

@if (Usuarios is null)
{
    <p>Cargando...</p>
}
else
{
    <EditForm Model="Modelo" OnValidSubmit="GuardarAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-grid">
            <label>Activo</label>
            <InputSelect @bind-Value="Modelo.ActivoId">
                @foreach (var activo in ActivosDisponibles)
                {
                    <option value="@activo.Id">@activo.CodigoInventario</option>
                }
            </InputSelect>

            <label>Usuario</label>
            <InputSelect @bind-Value="Modelo.UsuarioId">
                @foreach (var usuario in Usuarios)
                {
                    <option value="@usuario.Id">@usuario.Email</option>
                }
            </InputSelect>

            <label>Fecha entrega</label>
            <InputDate @bind-Value="Modelo.FechaEntrega" />

            <label>Responsable entrega</label>
            <InputText @bind-Value="Modelo.ResponsableEntrega" />

            <label>Observaciones</label>
            <InputTextArea @bind-Value="Modelo.Observaciones" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(Error))
{
    <div class="text-danger">@Error</div>
}

@code {
    private Asignacion Modelo { get; set; } = new()
    {
        FechaEntrega = DateTime.UtcNow.Date,
        ResponsableEntrega = ""
    };

    private List<Activo> ActivosDisponibles { get; set; } = new();
    private List<AppUser>? Usuarios { get; set; }
    private string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var activos = await ActivosService.BuscarAsync(null, null, 1, 100);
        ActivosDisponibles = activos.Items.Where(a => a.Estado != EstadoActivo.Asignado).ToList();
        Usuarios = (await UserManager.Users.ToListAsync());
        if (Usuarios.Count > 0)
        {
            Modelo.UsuarioId = Usuarios.First().Id;
        }
        if (ActivosDisponibles.Count > 0)
        {
            Modelo.ActivoId = ActivosDisponibles.First().Id;
        }
    }

    private async Task GuardarAsync()
    {
        try
        {
            await AsignacionesService.AsignarAsync(Modelo.ActivoId, Modelo.UsuarioId, Modelo.FechaEntrega, Modelo.ResponsableEntrega, Modelo.AreaId, Modelo.PlantaId, Modelo.Observaciones);
            Navigation.NavigateTo("/asignaciones");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/asignaciones");
    }
}

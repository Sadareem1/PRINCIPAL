@page "/usuarios/editar/{Id}"
@attribute [Authorize(Policy = "RequireAdmin")]
@inject UserManager<AppUser> UserManager
@inject NavigationManager Navigation

<h1>Editar usuario</h1>

@if (Modelo is null)
{
    <p>Cargando...</p>
}
else
{
    <EditForm Model="Modelo" OnValidSubmit="GuardarAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-grid">
            <label>Nombres</label>
            <InputText @bind-Value="Modelo.Nombres" />

            <label>Apellidos</label>
            <InputText @bind-Value="Modelo.Apellidos" />

            <label>Correo</label>
            <InputText @bind-Value="Modelo.Email" />

            <label>Rol</label>
            <InputSelect @bind-Value="RolSeleccionado">
                <option value="Administrador">Administrador</option>
                <option value="Tecnico">Tecnico</option>
                <option value="Consulta">Consulta</option>
            </InputSelect>

            <label>Estado</label>
            <InputCheckbox @bind-Value="Modelo.Estado" /> Activo
        </div>

        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(Error))
{
    <div class="text-danger">@Error</div>
}

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    private AppUser? Modelo { get; set; }
    private string RolSeleccionado { get; set; } = "Consulta";
    private string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Modelo = await UserManager.FindByIdAsync(Id);
        if (Modelo != null)
        {
            var roles = await UserManager.GetRolesAsync(Modelo);
            RolSeleccionado = roles.FirstOrDefault() ?? Modelo.Rol ?? "Consulta";
        }
    }

    private async Task GuardarAsync()
    {
        if (Modelo is null)
        {
            return;
        }

        Modelo.Rol = RolSeleccionado;
        var result = await UserManager.UpdateAsync(Modelo);
        if (!result.Succeeded)
        {
            Error = string.Join("; ", result.Errors.Select(e => e.Description));
            return;
        }

        var currentRoles = await UserManager.GetRolesAsync(Modelo);
        await UserManager.RemoveFromRolesAsync(Modelo, currentRoles);
        await UserManager.AddToRoleAsync(Modelo, RolSeleccionado);
        Navigation.NavigateTo("/usuarios");
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/usuarios");
    }
}

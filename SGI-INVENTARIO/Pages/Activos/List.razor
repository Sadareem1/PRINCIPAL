@page "/activos"
@attribute [Authorize(Policy = "SoloLectura")]
@inject IActivosService ActivosService
@inject NavigationManager Navigation

<h1>Activos</h1>

<div class="toolbar">
    <input @bind="Filtro" @bind:event="oninput" placeholder="Buscar" />
    <AuthorizeView Roles="Administrador,Tecnico">
        <button class="btn btn-primary" @onclick="Crear">Nuevo activo</button>
    </AuthorizeView>
</div>

<DataTable>
    <Header>
        <tr>
            <th>CÃ³digo</th>
            <th>Marca</th>
            <th>Modelo</th>
            <th>Estado</th>
            <th></th>
        </tr>
    </Header>
    <Body>
        @foreach (var activo in Activos)
        {
            <tr>
                <td>@activo.CodigoInventario</td>
                <td>@activo.Marca</td>
                <td>@activo.Modelo</td>
                <td>@activo.Estado</td>
                <td>
                    <button class="btn btn-link" @onclick="() => Navigation.NavigateTo($"/activos/{activo.Id}")">Detalles</button>
                    <AuthorizeView Roles="Administrador,Tecnico">
                        <button class="btn btn-link" @onclick="() => Navigation.NavigateTo($"/activos/editar/{activo.Id}")">Editar</button>
                    </AuthorizeView>
                </td>
            </tr>
        }
    </Body>
</DataTable>

@code {
    private List<Activo> Activos { get; set; } = new();
    private string? filtro;
    private string? Filtro
    {
        get => filtro;
        set
        {
            if (filtro != value)
            {
                filtro = value;
                _ = CargarAsync();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarAsync();
    }

    private async Task CargarAsync()
    {
        var result = await ActivosService.BuscarAsync(Filtro, null, 1, 50);
        Activos = result.Items.ToList();
    }

    private void Crear()
    {
        Navigation.NavigateTo("/activos/nuevo");
    }
}
